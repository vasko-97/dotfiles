" v-todo
" revise the g leader mappings.. don't need forward/back, gd can be used without leader. go to test? can add error nav here and free up e mappings
" consider making use of g keybinds. e.g. use go to go to top of page, then gg for something else.
" get vim working decently and in Git on windows
" make zt, zz, zb more ergonomic with leader keys maybe
" add better keybind for Ctrl+F12
" set Rider keybinds to avoid hitting Enter too much.. e.g. when picking intellisense value
" set good binding for Ctrl+W expanding highlight
" how to remove popups without hitting Esc and entering normal mode?

" Based on various different ideavimrcs. Resources: 
" https://github.com/OptimusCrime/ideavim/blob/main/ideavimrc
" massive collection: https://github.com/JetBrains/ideavim/discussions/303
" https://medium.com/@dbilici/a-practical-ideavim-setup-for-intellij-idea-cf74222e7b45
" https://towardsdatascience.com/the-essential-ideavim-remaps-291d4cd3971b/
"" Base Settings
"" ========================================================

if has('unix')
	source ~/.vimrc
else
	source C:/Program Files/Vim/_vimrc
endif

set ideajoin
set idearefactormode=visual
set ideamarks

"" Plugin Settings
"" ========================================================

set surround
set highlightedyank
" set sneak
" I want to get my basics good before getting into quickscope.
" set quickscope
set nerdtree
" v-todo: consider adding vim switch

" I want to get my basics good before getting into easy motion.
" Easymotion settings
" set easymotion

" Which-key configuration
set which-key
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowVimActions = "true"
let g:WhichKeyDesc_leader = "<leader> Leader key"
" let g:WhichKeyDesc_easymotion = "<leader>j Jump with Easymotion"

"" Key mappings
"" ========================================================

" built-in navigation to navigated items works better
nmap <c-o> <Action>(Back)
nmap <c-i> <Action>(Forward)
" but preserve ideavim defaults
map g<c-o> <c-o>
map g<c-i> <c-i>

" using older style :action with <CR> because new style of <action> seems to have a bug.. not sure what's going on but the below works.
nmap [[ :action EditorCodeBlockStart<CR>
nmap ]] :action EditorCodeBlockEnd<CR>
vmap [[ :action EditorCodeBlockStartWithSelection<CR>
vmap ]] :action EditorCodeBlockEndWithSelection<CR>

map gn <Action>(GotoNextElementUnderCaretUsage)
map gN <Action>(GotoPrevElementUnderCaretUsage)

"" Leader commands
"" ========================================================

" Top level commands
" v-todo: I will move commands into top level once I have more experience to
" know which ones are most important

" Misc
let g:WhichKeyDesc_misc = "<leader>m Misc"
let g:WhichKeyDesc_leader = "<leader>mx Open Project View"
let g:WhichKeyDesc_comment = "<leader>mc Comment line"
let g:WhichKeyDesc_show_in_project_view = "<leader>me Show in Project View"
let g:WhichKeyDesc_show_parameter_info = "<leader>mp Show Parameter Info"
let g:WhichKeyDesc_reformat_code = "<leader>mr Reformat Code"
let g:WhichKeyDesc_toggle_wrap = "<leader>mw Toggle Soft Wrap"
let g:WhichKeyDesc_hide_all_windows = "<leader>mh Toggle Hide All Windows"
let g:WhichKeyDesc_show_hover_info = "<leader>mi Show Hover Info"
let g:WhichKeyDesc_move_file = "<leader>mv Move File (Fuzzier)"
let g:WhichKeyDesc_switcher = "<leader>ms Open Switcher"
let g:WhichKeyDesc_select_whole_file = "<leader>ma Select Whole File"
map <leader>mx :NERDTreeToggle<CR>
map <leader>mc <action>(CommentByLineComment)
map <leader>me <action>(SelectInProjectView)
map <leader>mp <action>(ParameterInfo)
map <leader>mr <action>(ReformatCode)
map <leader>mw <action>(EditorToggleUseSoftWraps)
map <leader>mh <action>(HideAllWindows)
map <leader>mi <action>(ShowHoverInfo)
map <leader>mv <action>(com.mituuz.fuzzier.FuzzyMover)
map <leader>ms <action>(Switcher)
map <Leader>ma ggVG
if &ide =~? 'JetBrains Rider'
	let g:WhichKeyDesc_select_containing_declaration = "<leader>mm Select Containing Declaration"
	map <leader>mm <action>(ReSharperSelectContainingDeclaration)
endif
if &ide =~? 'DataGrip'
	let g:WhichKeyDesc_show_in_database_view = "<leader>md Select in Database View"
	map <leader>md <action>(sql.SelectInDatabaseView)
endif

" Build/Run/Debug
let g:WhichKeyDesc_build_run_debug = "<leader>o Build/Run/Debug"
let g:WhichKeyDesc_run = "<leader>or Run"
let g:WhichKeyDesc_build = "<leader>ob Build"
let g:WhichKeyDesc_debug = "<leader>od Debug"
let g:WhichKeyDesc_toggle_breakpoint = "<leader>op Toggle Breakpoint"
map <leader>or <action>(Run)
if &ide =~? 'JetBrains Rider'
	map <leader>ob <action>(BuildWholeSolutionAction)
else
	map <leader>ob <action>(BuildProject)
endif
map <leader>od <action>(Debug)
map <leader>op <action>(ToggleLineBreakpoint)
if &ide =~? 'JetBrains Rider'
	let g:WhichKeyDesc_debug_unit_test = "<leader>ot Debug Unit Test Under Cursor"
	map <leader>ot <action>(RiderUnitTestDebugContextAction)
	let g:WhichKeyDesc_run_unit_test = "<leader>ol Run Unit Test Under Cursor"
	map <leader>ol <action>(RiderUnitTestRunContextAction)
endif

" Jump around with easymotion
" map <leader>j <Plug>(easymotion-s)

" Folding
let g:WhichKeyDesc_fold = "<leader>z Folding"
let g:WhichKeyDesc_fold_all = "<leader>zc Fold all regions"
let g:WhichKeyDesc_unfold_all = "<leader>zo Expand all regions"
map <leader>zc :action CollapseAllRegions<CR>
map <leader>zo :action ExpandAllRegions<CR>

" Window splits
let g:WhichKeyDesc_window = "<leader>w Window splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"
map <leader>wv <Action>(SplitVertically)
map <leader>ws <Action>(SplitHorizontally)
map <leader>wu <Action>(Unsplit)
map <leader>wm <Action>(MoveEditorToOppositeTabGroup)

" Display options
let g:WhichKeyDesc_display = "<leader>d Display options"
let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>dd Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>df Toggle full screen"
map <leader>dd <action>(ToggleDistractionFreeMode)
map <leader>dz <action>(ToggleZenMode)
map <leader>df <action>(ToggleFullScreen)

" Search
let g:WhichKeyDesc_search = "<leader>s Search"
let g:WhichKeyDesc_everywhere_search = "<leader>se Search Everywhere"
let g:WhichKeyDesc_action_search = "<leader>sa Search Actions"
let g:WhichKeyDesc_file_search = "<leader>sf Search for File (Fuzzier)"
let g:WhichKeyDesc_text_search = "<leader>sg Grep Files (Fuzzier)"
map <leader>se <action>(SearchEverywhere)
map <leader>sa <action>(GotoAction)
" use GotoFile action for native file search
map <leader>sf <action>(com.mituuz.fuzzier.Fuzzier)
" use FindInPath for native text search
map <leader>sg <action>(com.mituuz.fuzzier.FuzzyGrepCaseInsensitive)

" File navigation
let g:WhichKeyDesc_file_nav = "<leader>f File navigation"
let g:WhichKeyDesc_file_nav_show_recent_files = "<leader>fe Show recent files"
let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>fl Show recent locations"
let g:WhichKeyDesc_file_nav_new_scratch_file = "<leader>fs New Scratch File"
map <leader>fe <action>(RecentFiles)
map <leader>fl <action>(RecentLocations)
map <leader>fs <action>(NewScratchFile)

" Refactoring
let g:WhichKeyDesc_refactoring = "<leader>r Refactoring menu"
let g:WhichKeyDesc_refactoring_rename = "<leader>rn Rename element"
let g:WhichKeyDesc_refactoring_method = "<leader>rm Extract method"
let g:WhichKeyDesc_refactoring_variable = "<leader>rv Introduce variable"
let g:WhichKeyDesc_refactoring_field = "<leader>rf Introduce field"
let g:WhichKeyDesc_refactoring_signature = "<leader>rs Change signature"
let g:WhichKeyDesc_refactoring_all = "<leader>rr Open refactorings list"
map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

" Go to code
let g:WhichKeyDesc_goto = "<leader>g Go to X"
let g:WhichKeyDesc_goto_declaration = "<leader>gd Go to Definition"
let g:WhichKeyDesc_goto_type_declaration = "<leader>gy Go to Type Definition"
let g:WhichKeyDesc_goto_implementation = "<leader>gi Go to Implementation"
let g:WhichKeyDesc_goto_usages = "<leader>gu Go to Usages"
let g:WhichKeyDesc_goto_test = "<leader>gt Go to Test"
let g:WhichKeyDesc_goto_back = "<leader>gb Go Back"
let g:WhichKeyDesc_goto_forward = "<leader>gf Go Forward"
let g:WhichKeyDesc_goto_nextmethod = "<leader>gj Next Method"
let g:WhichKeyDesc_goto_previousmethod = "<leader>gk Previous Method"
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gy <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gu <Action>(ShowUsages)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gf <Action>(Back)
nmap <leader>gb <Action>(Forward)
nmap <leader>gj <Action>(MethodDown)
nmap <leader>gk <Action>(MethodUp)

" Errors
let g:WhichKeyDesc_errors = "<leader>e Error navigation"
let g:WhichKeyDesc_errors_next = "<leader>en Go to next error in solution"
let g:WhichKeyDesc_errors_prev = "<leader>ep Go to previous error in solution"
map <leader>en <Action>(GotoNextError)
map <leader>ep <Action>(GotoPreviousError)

" HarpoonIJ
let g:WhichKeyDesc_harpoon = "<leader>h Harpoon"
let g:WhichKeyDesc_show_harpoon = "<leader>ho Open Harpoon Popup"
let g:WhichKeyDesc_add_to_harpoon = "<leader>ha Add to Harpoon"
let g:WhichKeyDesc_set_harpoon = "<leader>hs Set Harpoon"
let g:WhichKeyDesc_set_harpoon_1 = "<leader>hs1 Set Harpoon 1"
let g:WhichKeyDesc_set_harpoon_2 = "<leader>hs2 Set Harpoon 2"
let g:WhichKeyDesc_set_harpoon_3 = "<leader>hs3 Set Harpoon 3"
let g:WhichKeyDesc_set_harpoon_4 = "<leader>hs4 Set Harpoon 4"
let g:WhichKeyDesc_set_harpoon_5 = "<leader>hs5 Set Harpoon 5"
let g:WhichKeyDesc_go_to_harpoon_1 = "<leader>h1 Go to Harpoon 1"
let g:WhichKeyDesc_go_to_harpoon_2 = "<leader>h2 Go to Harpoon 2"
let g:WhichKeyDesc_go_to_harpoon_3 = "<leader>h3 Go to Harpoon 3"
let g:WhichKeyDesc_go_to_harpoon_4 = "<leader>h4 Go to Harpoon 4"
let g:WhichKeyDesc_go_to_harpoon_5 = "<leader>h5 Go to Harpoon 5"
map <leader>ho <Action>(ShowHarpoon)
map <leader>ha <Action>(AddToHarpoon)
map <leader>hs1 <Action>(SetHarpoon1)
map <leader>hs2 <Action>(SetHarpoon2)
map <leader>hs3 <Action>(SetHarpoon3)
map <leader>hs4 <Action>(SetHarpoon4)
map <leader>hs5 <Action>(SetHarpoon5)
map <leader>h1 <Action>(GotoHarpoon1)
map <leader>h2 <Action>(GotoHarpoon2)
map <leader>h3 <Action>(GotoHarpoon3)
map <leader>h4 <Action>(GotoHarpoon4)
map <leader>h5 <Action>(GotoHarpoon5)

let g:WhichKeyDesc_reload_vim_rc = "<leader>9 Reload .ideavimrc"
map <leader>9 :source ~/.ideavimrc<CR>
let g:WhichKeyDesc_remove_search_highlight = "<leader>1 Clear Search Highlights"
map <leader>1 :nohlsearch<CR>

" should be mapped to Up/Down in IDE to enable navigating menus from home row
sethandler <c-j> a:ide
sethandler <c-k> a:ide

" should be set to Editor Choose Lookup Item in the IDE
sethandler <c-l> a:ide

" v-todo: add Rider select from caret to start/beginning of method (CTRL+SHIFT+[/]). Add better bind for next/prev method. Better keybinds for extract/inline variable.
" v-todo: search "Editor Choose Lookup" in Rider to see what else is worth remapping
" v-todo: think about remapping R to something useful because the default bind is not useful (maybe map R to ciw). Same for K which goes to man page of word under cursor (only useful if writing C), maybe map to show documentation popup.
" v-todo: consider mapping <leader>gu to gr (go to references) instead
" v-todo: consider remapping H, M, L. They're not that useful because if you can see where you want to go on the screen then there are better commands to get there
" v-todo: I don't use % that much.. consider remapping it as well
" v-todo: automate fixing indentation when pasting, e.g. pasting a single line from outside an if block into an if block
" v-todo: map g; to rider's go to last edit location
